// Layout
// rafce
// Header / Navbar / Logo

import axios from "axios";
import { useEffect } from "react";

// Maybe star wars moving stars background if possible with letters rolling from film
// Music Player that auto starts

// filtered search bar at top

// list of first 10 people


// Hugggeee


// Characters.js
// const [characters, setCharacters] = useState([]);
// const [nextPageUrl, setNextPageUrl] = useState("https://swapi.dev/api/people/");

// const fetchPeople = async () => {
//   const { data } = await axios.get(nextPageUrl);
//   setCharacters((characters) => [...characters, ...data.results]);
//   setNextPageUrl(data.url);
// }

// useEffect(() => {
//   fetchPeople();
// }, []);

// return characters.map(character => <Character homeworldUrl={character.homeworld} />

// // Character.js
// const Character = ({homeworldUrl}) => {
//   const [home, setHome] = useState({});

//   const fetchHomeworld = async () => {
//     const { data } = await axios.get(homeworldUrl);
//     // todo: implement the rest
//     setHome(...);
//   }

//    useEffect(() => {
//      fetchHomeworld();
//    }, [homeworldUrl]);
// }





// Huge 2


// const [characters, setCharacters] = useState([]);
// const [nextPageUrl, setNextPageUrl] = useState("https://swapi.dev/api/people/");

// const fetchPeople = async () => {
//   const { data } = await axios.get(nextPageUrl);
//   setCharacters((characters) => [...characters, ...data.results]);
//   setNextPageUrl(data.url);
// }

// useEffect(() => {
//   fetchPeople();
// }, []);
// Now, you could set up a button to call fetchPeople once clicked, for pagination
// Or, if you're really trying to fetch all the people until there aren't any left (I would advise against this), then you could add nextPageUrl in the dependency array:

// useEffect(() => {
//   if (nextPageUrl) {
//     fetchPeople();
//   }
// }, [nextPageUrl]);



// homeworld shit

// Ahh okay. So the way I would structure this, is to create a Person component.

// Pass the homeworld as a prop to the Person component, that will fetch that homeworld and display the necessary data.



// Search
// Searching
// All resources support a search parameter that filters the set of resources returned. This allows you to make queries like:

// https://swapi.dev/api/people/?search=r2



// useEffect() => {
//   async function getStuff() {
//     setLoading(true);
//     const things = await getThings();
//     const specificThings = await Promise.all(
//       things.map(thing => getSpecificThing(thing.url)
//     );
//     setSpecificThings(specificThings);
//     setLoading(false);
//   };

//   getStuff();
// }, []);



// const things = await getThings();
// const specificUrl = await Promise.all(
//   things.map((thing) => axios.get(thing.homeworld))
// );
// setHomeWorld(specificUrl);




// New creating entire person object

// async function getSwapi() {
//   const persons = await fetchPeople();
//   const specificUrls = await Promise.all(
//     person.map((person) => axios.get(person.homeworld))
//   );

//   const newPersons = persons.map((person) => {
//     return {
//       ...person,
//       homeworldData: specificUrls.find((url) => url.url === person.homeworld),
//     };
//   });
//   return newPersons;
// }


